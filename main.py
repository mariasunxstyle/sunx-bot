import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import os

API_TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = "@sunxstyle"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def get_check_sub_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="check_sub"))
    return markup

async def is_subscribed(user_id):
    async with aiohttp.ClientSession() as session:
        url = f"https://api.telegram.org/bot{API_TOKEN}/getChatMember?chat_id={CHANNEL_USERNAME}&user_id={user_id}"
        async with session.get(url) as resp:
            data = await resp.json()
            return data.get("result", {}).get("status") in ["member", "creator", "administrator"]

GREETING_TEXT = """–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è
–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.
–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.
–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É –≤–∏—Ç–∞–º–∏–Ω–∞ D,
—Ä–µ–≥—É–ª—è—Ü–∏—é –≥–æ—Ä–º–æ–Ω–æ–≤ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.

–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.
–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.

–•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∂–º–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ. –¢–∞–º –≤—Å—ë –ø–æ –¥–µ–ª—É."""

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if await is_subscribed(user_id):
        await message.answer(GREETING_TEXT)
    else:
        await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=get_check_sub_button())

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def callback_check_sub(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_subscribed(user_id):
        await bot.send_message(user_id, GREETING_TEXT)
    else:
        await bot.answer_callback_query(callback_query.id, "–ü–æ—Ö–æ–∂–µ, —Ç—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞).", show_alert=True)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
